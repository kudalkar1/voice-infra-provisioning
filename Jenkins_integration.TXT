1. Jenkins Setup (one-time)
Install Jenkins on a Linux machine or EC2

Install necessary plugins:

Git, Ansible, Terraform, Pipeline

Configure Jenkins global tools:

Git, Ansible (ansible command path), Terraform (terraform command path)


2. Jenkinsfile (Pipeline Script)
Create a Jenkinsfile in the root of Git repo:


pipeline {
    agent any

    environment {
        TF_VAR_key_name = "keypair-name"
    }

    stages {
        stage('Clone Repo') {
            steps {
                git 'https://github.com/<username>/voice-infra-provisioning.git'
            }
        }

        stage('Terraform Init & Apply') {
            dir('terraform') {
                steps {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Generate Inventory File') {
            steps {
                script {
                    def pabx_ip = sh(script: "cd terraform && terraform output -raw pabx_server_ip", returnStdout: true).trim()
                    def recording_ip = sh(script: "cd terraform && terraform output -raw recording_server_ip", returnStdout: true).trim()
                    def pabx_db_ip = sh(script: "cd terraform && terraform output -raw pabx_db_ip", returnStdout: true).trim()
                    def recording_db_ip = sh(script: "cd terraform && terraform output -raw recording_db_ip", returnStdout: true).trim()

                    writeFile file: 'ansible/inventory', text: """
[pabx_app]
${pabx_ip}

[recording_app]
${recording_ip}

[db_servers]
${pabx_db_ip}
${recording_db_ip}

[all:vars]
ansible_user=ec2-user
ansible_ssh_private_key_file=/path/to/your/private-key.pem
"""
                }
            }
        }

        stage('Run Ansible Playbook') {
            dir('ansible') {
                steps {
                    sh 'ansible-playbook -i inventory playbook.yml'
                }
            }
        }
    }

    post {
        failure {
            mail to: 'your-alert@example.com',
                 subject: "Jenkins Job Failed: ${env.JOB_NAME}",
                 body: "Job ${env.BUILD_NUMBER} failed. Check Jenkins console for details."
        }
    }
}



3. Configure Jenkins Job
Create a new Pipeline job

In "Pipeline" section:

Select Pipeline script from SCM

SCM: Git

Repo URL: https://github.com/<username>/voice-infra-provisioning.git

Script path: Jenkinsfile


4. Credentials & Access
Ensure the Jenkins server:

- Has access to AWS (via AWS CLI or environment variables)
- Can SSH into EC2 instances using the correct .pem key
- Has ansible, terraform, and git installed

Add SSH key to Jenkins credentials (or use ansible_ssh_private_key_file directly)


5. Run the Job
Click Build Now

Watch Jenkins pipeline execute:

Git checkout

Terraform provisioning

Dynamic Ansible inventory creation

Ansible deployment

Alerts on failure

